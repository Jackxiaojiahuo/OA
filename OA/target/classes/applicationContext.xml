<?xml version="1.0" encoding="UTF-8"?>
<beans
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.1.xsd
	http://www.springframework.org/schema/tx
	http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
	<!-- 使用spring支持自动检测组件 -->
	<context:component-scan base-package="dao,biz" />
	<!-- 分散配置 -->
    <context:property-placeholder location="classpath:jdbc.properties" />
    <!-- 引入同文件夹下的redis属性配置文件 -->
 <!--    <import resource="redis-context.xml"/> -->
  <!-- 缓存 -->
	<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager">
			<property name="cacheManager" ref="ehcacheManager"/>
	</bean>
	<!--ehcache-->
	<bean id="ehcacheManager" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean">
		<property name="configLocation" value="classpath:ehcache.xml"/>
	</bean>    
	<bean id="dataSource"  class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
		<!-- <property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/oa" />
		<property name="username" value="root" />
		<property name="password" value="ok" /> -->
		
		<property name="driverClassName" value="${jdbc.driver}"/>
        <property name="url" value="${jdbc.url}"/>
        <property name="username" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
		
	<!-- 	<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />  
	    <property name="username" value="${uname}" />  
	    <property name="password" value="${pwd}" />  --> 
	        
	    <!-- 配置初始化大小 -->  
	    <property name="initialSize" value="1" /> 
	    <!-- 连接池最小空闲 -->   
	    <property name="minIdle" value="1" />   
	    <!-- 连接池最大使用连接数量 -->
	    <property name="maxActive" value="20" />  
	    <!-- 配置获取连接等待超时的时间 -->  
	    <property name="maxWait" value="60000" />  
	    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->  
	    <property name="timeBetweenEvictionRunsMillis" value="60000" />  
	    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->  
	    <property name="minEvictableIdleTimeMillis" value="300000" />  
	    <!-- 验证数据库连接有效性，要求查询语句 --> 
	    <property name="validationQuery" value="SELECT 'x'" />  
	    <!-- 建议配置为true，不影响性能，并且保证安全性。申请连接的时候检测，如果空闲时间大于timeBetweenEvictionRunsMillis，执行validationQuery检测连接是否有效。 --> 
	    <property name="testWhileIdle" value="true" />  
	    <!-- 申请连接时执行validationQuery检测连接是否有效，配置true会降低性能。 -->
	    <property name="testOnBorrow" value="false" />  
	    <!-- 归还连接时执行validationQuery检测连接是否有效，配置true会降低性能 -->
	    <property name="testOnReturn" value="false" />  
	    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->  
	    <!-- 是否缓存preparedStatement，也就是PSCache。PSCache对支持游标的数据库性能提升巨大，比如说oracle。在mysql下建议关闭。-->
	  <!--   <property name="poolPreparedStatements" value="true" />  
	    <property name="maxPoolPreparedStatementPerConnectionSize" value="20" />   -->
	    <!-- 配置监控统计拦截的filters，去掉后监控界面sql无法统计 -->  
	    <property name="filters" value="stat" />  
	</bean>
	<!--创建Spring的SessionFactory工厂 -->
	<!-- mybatis -->
	<bean class="org.mybatis.spring.SqlSessionFactoryBean" id="sqlSessionFactoryBean">
		<!-- 注入数据源 -->
		<property name="dataSource" ref="dataSource"></property>
		<!-- mapper -->
		<property name="mapperLocations" value="classpath:dao/*.xml"></property>
		<!-- 别名 -->
		<!-- 设置Spring取那个包中查找相应的实体类 -->
		<property name="typeAliasesPackage" value="model"></property>
	</bean>
	
	<!-- 我们不写dao的实现类，只写dao接口，下面这个bean可以创建并且实例化dao接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer" id="mapperScannerConfigurer">
		<!-- dao指的是包名 -->
		<property name="basePackage" value="dao"></property>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryBean"></property>
	</bean>
	<!-- 配置哪些方法要加入事务控制 -->
	<!-- 声明式事务 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
		<!-- 让所有的方法都加入事务管理，为了提高效率，可以把一些查询之类的方法设置为只读的事务 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="find*" read-only="true" />
			<tx:method name="search*" read-only="true" />
			<tx:method name="*" rollback-for="Exception" />
		</tx:attributes>
	</tx:advice>
	<!-- 文件上传解析器 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" >
		<property name="defaultEncoding" value="UTF-8"></property>
		<property name="maxUploadSize" value="5120"></property>
        <property name="maxInMemorySize" value="10240000"></property>
	</bean>
	<!-- biz包下所有类方法 -->
	<!-- 配置AOP，Spring是通过AOP来进行事务管理的 -->
	<aop:config>
	<!-- 以下的事务是声明在DAO中，但是通常都会在Service来处理多个业务对象逻辑的关系，注入删除，更新等，此时如果在执行了一个步骤之后抛出异常
		就会导致数据不完整，所以事务不应该在DAO层处理，而应该在service，这也就是Spring所提供的一个非常方便的工具，声明式事务 -->
		<aop:pointcut id="fooServiceOperation" expression="execution(* biz.*..*(..))" />
		<!-- 通过advisor来确定具体要加入事务控制的方法 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="fooServiceOperation" />
	</aop:config>
	<!-- 配置Spring的事务处理 -->
	<!-- 创建事务管理器-->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>